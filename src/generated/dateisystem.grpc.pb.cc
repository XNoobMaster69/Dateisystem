// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dateisystem.proto

#include "dateisystem.pb.h"
#include "dateisystem.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dateisystem {

static const char* SyncService_method_names[] = {
  "/dateisystem.SyncService/SyncFile",
};

std::unique_ptr< SyncService::Stub> SyncService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SyncService::Stub> stub(new SyncService::Stub(channel, options));
  return stub;
}

SyncService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SyncFile_(SyncService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SyncService::Stub::SyncFile(::grpc::ClientContext* context, const ::dateisystem::SyncRequest& request, ::dateisystem::SyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dateisystem::SyncRequest, ::dateisystem::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncFile_, context, request, response);
}

void SyncService::Stub::async::SyncFile(::grpc::ClientContext* context, const ::dateisystem::SyncRequest* request, ::dateisystem::SyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dateisystem::SyncRequest, ::dateisystem::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncFile_, context, request, response, std::move(f));
}

void SyncService::Stub::async::SyncFile(::grpc::ClientContext* context, const ::dateisystem::SyncRequest* request, ::dateisystem::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dateisystem::SyncResponse>* SyncService::Stub::PrepareAsyncSyncFileRaw(::grpc::ClientContext* context, const ::dateisystem::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dateisystem::SyncResponse, ::dateisystem::SyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dateisystem::SyncResponse>* SyncService::Stub::AsyncSyncFileRaw(::grpc::ClientContext* context, const ::dateisystem::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

SyncService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncService::Service, ::dateisystem::SyncRequest, ::dateisystem::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dateisystem::SyncRequest* req,
             ::dateisystem::SyncResponse* resp) {
               return service->SyncFile(ctx, req, resp);
             }, this)));
}

SyncService::Service::~Service() {
}

::grpc::Status SyncService::Service::SyncFile(::grpc::ServerContext* context, const ::dateisystem::SyncRequest* request, ::dateisystem::SyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dateisystem

